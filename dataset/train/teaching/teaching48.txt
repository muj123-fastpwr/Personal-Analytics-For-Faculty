24.3  Reviews and inspections 667
Fault class Inspection check
Data faults • Are all program variables initialized before their values are used?
• Have all constants been named?
• Should the upper bound of arrays be equal to the size of the 
array or Size -1?
• If character strings are used, is a delimiter explicitly assigned?
• Is there any possibility of buffer overflow?
Control faults • For each conditional statement, is the condition correct?
• Is each loop certain to terminate?
• Are compound statements correctly bracketed?
• In case statements, are all possible cases accounted for?
• If a break is required after each case in case statements, has it 
been included?
Input/output faults
• Are all input variables used?
• Are all output variables assigned a value before they are output?
• Can unexpected inputs cause corruption?
Interface faults • Do all function and method calls have the correct number of
parameters?
• Do formal and actual parameter types match?
• Are the parameters in the right order?
• If components access shared memory, do they have the same model of
the shared memory structure?
Storage management faults • If a linked structure is modified, have all links been correctly
reassigned?
• If dynamic storage is used, has space been allocated correctly?
• Is space explicitly deallocated after it is no longer required?
Exception management faults • Have all possible error conditions been taken into account?
be more effective for defect detection than testing. Managers may be suspicious
Figure 24.8 An
because inspections require additional costs during design and development. They
inspection checklist
may not wish to take the risk that there will be no corresponding savings in program
testing costs.
Agile processes rarely use formal inspection or peer review processes. Rather,
they rely on team members cooperating to check each other’s code, and informal
guidelines, such as ‘check before check-in’, which suggest that programmers
should check their own code. Extreme programming practitioners argue that pair
programming is an effective substitute for inspection as this is, in effect, a contin-
ual inspection process. Two people look at every line of code and check it before
it is accepted.
Pair programming leads to a deep knowledge of a program, as both programmers
have to understand its working in detail to continue development. This depth of
knowledge is sometimes difficult to achieve in other inspection processes and so pair
programming can find bugs that sometimes would not be discovered in formal
